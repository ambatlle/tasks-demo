package cat.ambatlle.tasks.resources;

import cat.ambatlle.tasks.api.Task;
import cat.ambatlle.tasks.db.TaskRepository;
import org.jvnet.hk2.annotations.Service;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import ru.vyarus.guicey.jdbi3.tx.InTransaction;

import javax.inject.Inject;
import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.List;

// TODO: 24/02/2022 add some error management
// TODO: 24/02/2022 doc class
// TODO: 24/02/2022 add logging
// TODO: 24/02/2022 do some testing
// TODO: 25/02/2022 use autogenerated keys
@Path("/tasks")
@Service
public class TasksResource {

    private static final Logger LOGGER = LoggerFactory.getLogger(TasksResource.class);

    @Inject
    TaskRepository taskRepository;

    @GET
    @Path("/")
    @Produces(MediaType.APPLICATION_JSON)
    @InTransaction
    public List<Task> getAllTasks() {
        LOGGER.debug("Getting all tasks");
        return taskRepository.getAllTasks();
    }

    @POST
    @Path("/")
    @Produces(MediaType.APPLICATION_JSON)
    @Consumes(MediaType.APPLICATION_JSON)
    @InTransaction
    public Response createTask(Task newTask) {
        LOGGER.debug("Creating a new task");
        taskRepository.insert(newTask);
        Task dbTask = taskRepository.findTaskById(newTask.getId());
        LOGGER.debug("Task with id {} created", dbTask.getId());
        return Response.status(Response.Status.CREATED).entity(dbTask).build();
    }

    @PATCH
    @Path("/{id}")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    @InTransaction
    public Response changeDoneStatus(@PathParam(value = "id") int id, Task task) {
        LOGGER.debug("Changing done status to task {} to {}", id, task.isDone());
        final int numRows = taskRepository.toggleDone(id, task.isDone());
        if (numRows > 0) {
            LOGGER.debug("Task with id {} updated", id);
            return Response.status(Response.Status.ACCEPTED).entity(taskRepository.findTaskById(id)).build();
        }
        LOGGER.debug("Task with id {} not found", id);
        return Response.status(Response.Status.NOT_FOUND).build();
    }

    @DELETE
    @Path("/{id}")
    @Consumes(MediaType.APPLICATION_JSON)
    @InTransaction
    public Response removeTask(@PathParam(value = "id") int id) {
        LOGGER.debug("Deleting task with id {}", id);
        int numRows = taskRepository.deleteTaskById(id);
        if(numRows > 0) {
            LOGGER.debug("Task with id {} deleted", id);
            return Response.status(Response.Status.NO_CONTENT).build();
        }
        LOGGER.debug("Task with id {} not found", id);
        return Response.status(Response.Status.NOT_FOUND).build();
    }
}
